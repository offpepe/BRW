// <auto-generated />
using System;
using BRW.API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BRW.API.Migrations
{
    [DbContext(typeof(BrwAppContext))]
    [Migration("20220117202709_fkTry")]
    partial class fkTry
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BRW.API.Entities.Championship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("Jogo");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pid");

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_championship");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_championship_jogo");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_championship_team_id");

                    b.ToTable("championship", (string)null);
                });

            modelBuilder.Entity("BRW.API.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<char>("Genre")
                        .HasColumnType("character(1)")
                        .HasColumnName("genre");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_games");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("BRW.API.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("BRW.API.Entities.Prize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pid");

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_prizes");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_prizes_group_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_prizes_team_id");

                    b.ToTable("prizes", (string)null);
                });

            modelBuilder.Entity("BRW.API.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_teams_group_id");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("BRW.API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChampionshipId")
                        .HasColumnType("integer")
                        .HasColumnName("championship_id");

                    b.Property<int?>("ChampionshipId1")
                        .HasColumnType("integer")
                        .HasColumnName("championship_id1");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("password");

                    b.Property<Guid>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pid");

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("ChampionshipId")
                        .HasDatabaseName("ix_users_championship_id");

                    b.HasIndex("ChampionshipId1")
                        .HasDatabaseName("ix_users_championship_id1");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_users_group_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_users_team_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("BRW.API.Entities.Championship", b =>
                {
                    b.HasOne("BRW.API.Entities.Game", "Game")
                        .WithMany("Championships")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_championship_games_jogo");

                    b.HasOne("BRW.API.Entities.Team", null)
                        .WithMany("Championships")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("fk_championship_teams_team_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("BRW.API.Entities.Prize", b =>
                {
                    b.HasOne("BRW.API.Entities.Group", null)
                        .WithMany("Prizes")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_prizes_groups_group_id");

                    b.HasOne("BRW.API.Entities.Team", null)
                        .WithMany("Prizes")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("fk_prizes_teams_team_id");
                });

            modelBuilder.Entity("BRW.API.Entities.Team", b =>
                {
                    b.HasOne("BRW.API.Entities.Group", null)
                        .WithMany("Teams")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_teams_groups_group_id");
                });

            modelBuilder.Entity("BRW.API.Entities.User", b =>
                {
                    b.HasOne("BRW.API.Entities.Championship", null)
                        .WithMany("Apresentadores")
                        .HasForeignKey("ChampionshipId")
                        .HasConstraintName("fk_users_championship_championship_id");

                    b.HasOne("BRW.API.Entities.Championship", null)
                        .WithMany("Mvps")
                        .HasForeignKey("ChampionshipId1")
                        .HasConstraintName("fk_users_championship_championship_id1");

                    b.HasOne("BRW.API.Entities.Group", null)
                        .WithMany("Players")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_users_groups_group_id");

                    b.HasOne("BRW.API.Entities.Team", null)
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("fk_users_teams_team_id");
                });

            modelBuilder.Entity("BRW.API.Entities.Championship", b =>
                {
                    b.Navigation("Apresentadores");

                    b.Navigation("Mvps");
                });

            modelBuilder.Entity("BRW.API.Entities.Game", b =>
                {
                    b.Navigation("Championships");
                });

            modelBuilder.Entity("BRW.API.Entities.Group", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Prizes");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("BRW.API.Entities.Team", b =>
                {
                    b.Navigation("Championships");

                    b.Navigation("Players");

                    b.Navigation("Prizes");
                });
#pragma warning restore 612, 618
        }
    }
}
